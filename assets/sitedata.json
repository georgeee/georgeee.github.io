


{
  "pages": [
    {
      
      
      
      "content": "\n",
      "url": "/404.html"
    },{
      
      "title": "Config",
      "description": "This chapter covers the many configuration options of Hydejack, allowing you to tailor it to your needs.\n",
      "content": "Once Jekyll is running, you can start with basic configuration by adding various entries to _config.yml. \nBesides the documentation here, you can also read the annotated config file.\n\nWhen making changes to _config.yml, it is necessary to restart the Jekyll process for changes to take effect.\n\n\n  Setting url and baseurl    \n      GitHub Pages\n    \n  \n  Changing accent colors and sidebar images    \n      Theme color\n    \n  \n  Changing fonts    \n      Removing Google Fonts\n    \n  \n  Choosing a blog layout    \n      Using the blog layout in a subdirectory\n    \n  \n  Adding an author    \n      Adding an author’s picture\n      Adding social media icons\n      Adding an email, RSS icon or download icon\n    \n  \n  Enabling comments\n  Enabling Google Analytics    \n      Using a custom analytics provider\n    \n  \n  Changing built-in strings\n  Adding legal documents\n  Enabling math blocks\n  Adding custom Favicons and App Icons    \n      Changing the Favicon\n      Changing the App Icons\n    \n  \n  Adding a cookies banner*\n  Enabling newsletter boxes*\n  Enabling Dark Mode*\n\n\nSetting url and baseurl\nThe first order of business should be to set the correct url and baseurl values in _config.yml.\n\nThe url is the domain of your site, including the protocol (http or https). For this site, it is\n\n# file: `_config.yml`\nurl: https://qwtel.com\n\n\nYou don’t need to provide this property when hosting on GitHub Pages or Netlify.\n\nIf your entire Jekyll blog is hosted in a subdirectory of your page, provide the path in baseurl with a leading /, but no trailing /,\ne.g.\n\n# file: `_config.yml`\nbaseurl: /hydejack\n\n\nOtherwise, provide the empty string ''\n\nYou don’t need to provide this property when hosting on GitHub Pages or Netlify.\n\nGitHub Pages\nWhen hosting on GitHub Pages the url is https://&lt;username&gt;.github.io\n(unless you are using a custom domain).\n\nThe baseurl depends on the kind of page you are hosting.\n\n\n  When hosting a user or organization page, use the empty string ''.\n  When hosting project page, use /&lt;reponame&gt;.\n\n\nFor for information on the types of pages you can host on GitHub, see the\nGitHub Help article.\n\nChanging accent colors and sidebar images\nHydejack allows you to choose the background image of the sidebar, as well as the accent color\n(color of the links, selection and focus outline, etc…).\n\n# file: `_config.yml`\naccent_image: /assets/img/sidebar-bg.jpg\naccent_color: rgb(79,177,186)\n\n\nI recommend using a blurred image in order for the text to remain readable.\nIf you save a blurred image as JPG, it will also drastically reduce its file size.\n\nThe accent_image property also accepts the special value none which will remove the default image.\n\nIf your sidebar image contains bright colors, the white text can be difficult to read. In this case, consider setting\ninvert_sidebar: true in the front matter to invert the text colors in the sidebar. \nUse front matter defaults to enable this on all pages (see below).\n\nNote that these values can be overwritten on a per-page basis, i.e. you can create a unique look for each page.\nYou can also apply a certain look to all posts in a category via front matter defaults, e.g.:\n\n# file: `_config.yml`\ndefaults:\n  - scope:\n      path:         hydejack/\n    values:\n      accent_image: /assets/img/hydejack-bg.jpg\n      accent_color: rgb(38,139,210)\n\n\nTheme color\nHydejack also supports the theme_color property. When set, it will change the background color of the sidebar, as well as set the theme_color property in the Web App Manifest. In some browsers, such as Chrome on Android, this will change the color of the browser’s UI components.\n\n# file: `_config.yml`\ntheme_color:  rgb(25,55,71)\n\n\nJust like accent_* properties, the theme color can be overridden on a per-page basis by setting it in the front matter.\n\nChanging fonts\nHydejack lets you configure the font of regular text and headlines, and it has built-in support for Google Fonts.\nThere are three keys in _config.yml associated with this: font, font_heading and google_fonts.\nThe defaults are:\n\n# file: `_config.yml`\nfont:         Noto Sans, Helvetica, Arial, sans-serif\nfont_heading: Roboto Slab, Helvetica, Arial, sans-serif\ngoogle_fonts: Roboto+Slab:700|Noto+Sans:400,400i,700,700i\n\n\nfont and font_heading must be valid CSS font-family values. When using Google Fonts make sure to provide at least one fallback.\n\nThe google_fonts key is the string necessary to fetch the fonts from Google.\nYou can get it from the download page at Google Fonts after you’ve selected one or more fonts:\n\n\n\nRemoving Google Fonts\nIf you prefer not to use Google Fonts and remove all associated code from the site,\nset the google_fonts key to false.\n\nThe no_google_fonts parameter has been removed in v9 and no longer has any effect.\n\nChoosing a blog layout\nHydejack features three layouts for showing your blog posts.\n\n\n  The list layout only shows the title and groups the posts by year of publication.\n  The grid layout* is exclusive to the PRO Version and will show a content card (with image) for each post.\n  The blog layout is a traditional paginated layout and shows the title and an excerpt of each post.\n\n\nIn order to use the list or grid layout add the following front-matter to a new markdown file:\n\n---\nlayout: list # or `grid`\ntitle:  Home\n---\n\n\nIf you want to use the blog layout, you need to add jekyll-paginate to your Gemfile and to the plugins list in your config file:\n\n# file: `Gemfile`\ngem \"jekyll-paginate\"\n\n\n# file: `_config.yml`\nplugins:\n  - jekyll-paginate\n\n\nYou also need to add the paginate and paginate_path keys to your config file, e.g.\n\n# file: `_config.yml`\npaginate:      10\npaginate_path: '/:num/'\n\n\nThe blog layout needs to be applied to a file with the .html file extension\nand the paginate_path needs to match the path to the index.html file.\nTo match the paginate_path above, put a index.html with the following front matter in the root directory:\n\n# file: `index.html`\n---\nlayout: blog\ntitle: Blog\n---\n\n\nFor more information see Pagination.\n\nUsing the blog layout in a subdirectory\nIf you want to use the blog layout at a URL like /my-blog/, create the following folder structure:\n\n├── my-blog\n│   └── index.html\n└── _config.yml\n\n\nYou can use the same index.html as before and place it in the subdirectory.\n\n# file: `my-blog/index.html`\n---\nlayout: blog\ntitle: Blog\n---\n\n\nIn your config file, make sure the paginate_path matches the name of the subdirectory:\n\n# file: `_config.yml`\npaginate:      10\npaginate_path: /my-blog/:num/ #!!\n\n\nTo add an entry in the sidebar to your blog directory, see Adding an entry to the sidebar.\n\nAdding an author\nAt a bare minimum, you should add an author key with a name and email sub-key\n(used by the feed plugin) to to your config file:\n\n# file: `_config.yml`\nauthor:\n  name:  Florian Klampfer\n  email: mail@qwtel.com\n\n\nIf you would like the author to be displayed in the about section below a post or project*, add an about key and provide markdown content. I recommend using the YAML pipe | syntax, so you can include multiple paragraphs:\n\n# file: `_config.yml`\nauthor:\n  name:  Florian Klampfer\n  email: mail@qwtel.com\n  about: |\n    Hi, I'm Florian or @qwtel...\n\n    This is another paragraph.\n\n\nAdding an author’s picture\nIf you’d like for the author’s picture to appear in addition the about text (see above), you can either use the jekyll-avatar plugin or provide URLs to images manually.\n\nTo use the plugin, add it to your Gemfile and the list of plugins in your config file:\n\n# file: `Gemfile`\ngem \"jekyll-avatar\"\n\n\n# file: `_config.yml`\nplugins:\n  - jekyll-avatar\n\n\nRun bundle install for the changes to take effect.\n\nMake sure you have provided a GitHub username in your config file (github_username),\nor to the author key (author.social.github, author.github.username, or author.github).\nSee Adding social media icons for more.\n\nTo set an image manually, you have to provide an URL to the author’s picture key:\n\n# file: `_config.yml`\nauthor:\n  picture:  /assets/img/me.jpg\n\n\nIf you’d like to provide multiple versions for screens with different pixel densities,\nyou can provide path and srcset keys instead:\n\n# file: `_config.yml`\nauthor:\n  picture:\n    path:   /assets/img/me.jpg\n    srcset:\n      1x:   /assets/img/me.jpg\n      2x:   /assets/img/me@2x.jpg\n\n\nThe keys of the srcset hash will be used as image descriptors. For more information on srcset, see the documentation at MDN, or this article from CSS-Tricks.\n\nAdding social media icons\nHydejack supports a variety of social media icons out of the box. These are defined on a per-author basis, so make sure you’ve followed the steps in Adding an author.\n\nIf you are using the gem-based version of Hydejack, download social.yml and put it into _data in the root directory. This is necessary because gem-based themes do not support including _data.\n\nYou can add a link to a social network by adding an entry to the social key in to an author.\nIt consists of the name of the social network as key and your username within that network as value, e.g.\n\n# file: `_config.yml`\nauthor:\n  social:\n    twitter: qwtel\n    github:  qwtel\n\n\nCheck out authors.yml to see which networks are available.\nYou can also follow the steps here to add your own social media icons.\n\nYou can change the order in which the icons appear by moving lines up or down, e.g.\n\n# file: `_config.yml`\nauthor:\n  social:\n    github:  qwtel # now github appears first\n    twitter: qwtel\n\n\nTo get an overview of which networks are available and how a typical username in that network looks like,\nsee the included authors.yml.\n\nShould providing a username not produce a correct link for some reason, you can provide a complete URL instead, e.g.\n\n# file: `_config.yml`\nauthor:\n  social:\n    youtube: https://www.youtube.com/channel/UCu0PYX_kVANdmgIZ4bw6_kA\n\n\nYou can add any platform, even if it’s not defined in social.yml, by providing a complete URL. However, a fallback icon  will be used when no icon is available. Supplying your own icons is an advanced topic.\n\nAdding an email, RSS icon or download icon\nIf you’d like to add an email , RSS , or download  icon to the list, add the email, rss, or download key, e.g.:\n\n# file: `_config.yml`\nauthor:\n  social:\n    email:    mail@qwtel.com\n    rss:      {{ site.url }}{{ site.baseurl }}/feed.xml # make sure you provide an absolute URL\n    download: https://github.com/hydecorp/hydejack/archive/v9.1.4.zip\n\n\nEnabling comments\nHydejack supports comments via Disqus. Before you can add comments to a page you need to register and add your site to Disqus’ admin console. Once you have obtained your “Disqus shortname”, you include it in your config file:\n\n# file: `_config.yml`\ndisqus: &lt;disqus shortname&gt;\n\n\nNow comments can be enabled by adding comments: true to the front matter.\n\n---\nlayout:   post\ntitle:    Hello World\ncomments: true\n---\n\n\nYou can enable comments for entire classes of pages by using front matter defaults.\nE.g. to enable comments on all posts, add to your config file:\n\n# file: `_config.yml`\ndefaults:\n  - scope:\n      type: posts\n    values:\n      comments: true\n\n\nEnabling Google Analytics\nEnabling Google Analytics is as simple as setting the google_analytics key.\n\n# file: `_config.yml`\ngoogle_analytics: UA-XXXXXXXX-X\n\n\nTo remove Google Analytics and all associated code from the site, set the google_analytics key to false.\n\nUsing a custom analytics provider\nIf you want to use a different analytics provider such as Matomo, you can add its code snippet to _includes/my-body.html (create if it doesn’t exist).\nThe default file contains an example.\n\nChanging built-in strings\nYou can change the wording of built-in strings like “Related Posts” or “Read more” in _data/strings.yml.\n\nIf you are using the gem-based version the file doesn’t exist, but you can get the default file here.\n\nYou will frequently find markers like &lt;!--post_title--&gt;.\nYou can place them freely within your string and they will be replaced with the content they refer to.\n\nYou may also use this feature to translate the theme into different languages.\nIn this case you should also set the lang key to your config file, e.g.\n\n# file: `_config.yml`\nlang: cc-ll\n\n\nwhere cc is the 2-letter country code and ll specifies a 2-letter location code, e.g.: de-at.\n\nYou may also change the strings used for formatting dates and times (look out for the date_formats key), but be aware that the values you provide need to be valid Ruby format directives.\n\nAdding legal documents\nIf you have pages for contact data, privacy policy, cookie policy, etc. you can add links to them in the footer by listing them under the legal key in your config file as follows:\n\n# file: `_config.yml`\nlegal:\n  - title: Impress\n    url:  /impress/\n  - title: Cookies Policy\n    url:  /cookies-policy/\n\n\nWhen using Hydejack’s offline feature, the pages listed here will be downloaded and cached when loading the page for the first time.\n\nEnabling math blocks\n\nHydejack supports math blocks with either KaTeX or MathJax.\n\nThe MathJax implementation comes with a client-side runtime and works on GitHub Pages. \nIt is the more heavy-weight of the two and doesn’t work without JavaScript enabled. \nDue to the size of the complete MathJax package, it only works partially with offline support enabled.\n\nThe KaTeX implementation pre-renders the KaTeX output during site building.\nIt’s more lightweight because it does not ship a client-side runtime and therefore works without JavaScript.\nIn my opinion, it is the more elegant solution, but it requires a JavaScript runtime on the machine that builds the site,\ni.e. it does not work on GitHub Pages.\n\nYou can switch between the two implementations by changing the kramdown.math_engine key to either katex or mathjax in your config file.\n\n# file: `_config.yml`\nkramdown:\n  math_engine:         katex\n  math_engine_opts:    {}\n\n\nThe KaTeX implementation also requires the kramdown-math-katex gem in your Gemfile. \nIf you intend to use MathJax instead, this step is not required.\n\n# file: `Gemfile`\ngem \"kramdown-math-katex\"\n\n\nThere are a couple of things to know about this gem:\n\n  It is not supported on GitHub Pages. \nYou have to build the site on your machine before uploading to GitHub,\nor use a more permissive cloud building tool such as Netlify.\n  You need some kind of JavaScript runtime on your machine.\nUsually installing NodeJS will suffice. \nAlternatively, adding gem \"duktape\" will also do.\nFor more, see https://github.com/kramdown/math-katex#documentation\n\n\nBefore you add math content, remember to run bundle install and restart Jekyll.\n\nAdding custom Favicons and App Icons\nChanging the Favicon\nBy default, Hydejack will use the Favicon from /assets/icons/favicon.ico and Apple Touch Icon from /assets/icons/icon-192x192.png.\nYou can either override these files, or override the path in the config file via favicon and app_touch_icon keys:\n\n# file: \"_config.yml\"\nfavicon: /favicon.ico\napple_touch_icon: /assets/img/logo.png\n\n\nChanging the App Icons\nBy default, Hydejack includes its own favicon, as well as app icons in 8 different resolutions.\n\n\n  \n    \n      Name\n      Resolution\n    \n  \n  \n    \n      icon-512x512.png\n      512x512\n    \n    \n      icon-384x384.png\n      384x384\n    \n    \n      icon-192x192.png\n      192x192\n    \n    \n      icon-152x152.png\n      152x152\n    \n    \n      icon-144x144.png\n      144x144\n    \n    \n      icon-128x128.png\n      128x128\n    \n    \n      icon-96x96.png\n      96x96\n    \n    \n      icon-72x72.png\n      72x72\n    \n  \n\n\nTo change the default icons you have to replce all of them. To make this manageable, I recommend using the following tools:\n\nFirst, use the Maskable.app Editor to confine your logo/picture to the “minimum safe area”. More on maskable app icons, see this article on web.dev. \nMake sure the base image is at least 512x512 pixels in size.\n\nThen use the Web App Manifest Generator to automatically resize the icons. \nUpload the icon downloaded from Maskable.app and then click “Generate .zip”. \nIn the zip, ignore the manifest.json and look for the icons folder. Copy it into the assets folder of your site.\n\nTo change the favicon, place your own favicon.ico (32x32, PNG) into assets/icons.\n\nAdding a cookies banner*\n\n# file: `_config.yml`\nhydejack:\n  cookies_banner: true\n\n\nEnabling this setting will show a notice at the top of the page to new visitors.\nYou can change the wording of the notice in _data/strings.yml\nwith the cookies_banner.text and cookies_banner.okay keys:\n\n# file: `_data/strings.yml`\ncookies_banner:\n  text: This site uses cookies. [Markdown allowed](/cookies-policy/)!\n  okay: Okay\n\n\nEnabling newsletter boxes*\nTo enable showing newsletter subscription boxes below each post and project,\nprovide your Tinyletter username to the tinyletter key in the config file.\n\n# file: `_config.yml`\ntinyletter:  &lt;tinyletter username&gt;\n\n\nTo edit the content of the newsletter box, open _data/strings.yml, and change the entries under the tinyletter key.\n\nIf want to use a different mailing provider you can build your own form, and insert it into _includes/my-newsletter.html. The file includes an example form for MailChimp, where you need to fill in site.mailchimp.action and site.mailchimp.hidden_input (you can get these from MailChimp).\n\nTo build a completely new from, you can use the same CSS classes as Bootstrap. Note that only form, grid and utility classes are available. Check out Forms by Example for more examples.\n\nEnabling Dark Mode*\nBuyers of the PRO version have access to a dark-themed version of Hydejack.\n\nDark mode can be enabled in config.yml under the hydejack key and has three settings and two adjustments:\n\n# file: `_config.yml`\nhydejack:\n  dark_mode:\n    dynamic: true\n    sunrise: 6\n    sunset:  18\n    icon:    true\n    always:  false\n\n\nSetting dynamic, will enable dark mode based on the client’s local time (unlike location-based sunset calculations, this approach does not require a permission form the user). You can adjust sunrise and sunset to change when to show the light/dark theme.\n\nSetting icon will show a switch to alternate between the light and dark mode at the top of the page.\n\nFinally, setting always will cause dark mode to become the default theme at all times (combine with dynamic: false).\n\nContinue with Basics\n\n",
      "url": "/docs/config/"
    },{
      
      "title": "Blog",
      "description": "The official Hydejack blog. Version updates, example content and how-to guides on how to blog with Jekyll.\n",
      "content": "\n",
      "url": "/blog/"
    },{
      
      "title": "Welcome",
      
      "content": "Hi! My name is George. I am a software engineer, project manager and financial market enthusiast from Russia.\n\nWelcome to my homepage! You can find something interesting to read in my Blog.\n\nAbout me\n\nI hold Master’s degree in Computer Science from ITMO University, one of the leading Russian CS school. After graduating I also taught Haskell there and I highly recommend our course.\nI have experience and knowledge in many areas of Computer Science, most notably in Distributed systems and Functional programming.\n\nOver my professional career I was working on podcast website, brokerage software, co-founded and PMed a SaaS startup. Last few years I was working in Blockchain space and among other things I took a pivotal role in launching Cardano blockchain mainnet, developing coinswap engine StakerBridge and Morley toolkit for\ndeveloping Tezos contracts.\n\nCurrently I’m at O(1) labs, working on networking stack of Mina Protocol, which I find one of the most exciting blockchain technologies.\n\nI live in Saint Petersburg, Russia with my lovely wife Ekaterina and a newborn son Yakov. We are digital nomads in spirit and travel a lot. In my free time I love listening classical music, studying Economics and Finance, practicing my German and reading Proust.\n\n",
      "url": "/"
    },{
      
      "title": "Install2",
      "description": "How you install Hydejack depends on whether you start a new site, or change the theme of an existing site.\n",
      "content": "How you install Hydejack depends on whether you start a new site, \nor change the theme of an existing site.\n\n\n  New sites\n  Existing sites    \n      Troubleshooting\n    \n  \n  GitHub Pages\n  Running locally\n\n\nNew sites\nFor new sites, the best way to get started with Hydejack is via the Starter Kit. \nIt comes with a documented config file and example content that gets you started quickly.\n\nIf you have a GitHub account, fork the Hydejack Starter Kit repository. \nOtherwise download the Starter Kit and unzip them somewhere on your machine.\n\nIf you bought the PRO Version of Hydejack, use the contents of the starter-kit folder instead.\n\nIn addition to the docs here, you can follow the quick start guide in the Starter Kit.\n\nYou can now jump to running locally.\n\nYou can now also  directly.\n\nExisting sites\nIf you have an existing site that you’d like to upgrade to Hydejack you can install the theme via bundler.\nAdd the following to your Gemfile:\n\n# file: `Gemfile`\ngem \"jekyll-theme-hydejack\"\n\n\nIf you bought the PRO Version of Hydejack, copy the #jekyll-theme-hydejack folder into the root folder of your site,\nand add the following to your Gemfile instead:\n\n# file: `Gemfile`\ngem \"jekyll-theme-hydejack\", path: \"./#jekyll-theme-hydejack\"\n\n\nThe folder is prefixed with a # to indicate that this folder is different from regular Jekyll content. \nThe # char was choosen specifically because it is on of the four characters ignored by Jekyll by default (., _ , #, ~).\n\nIn your config file, change the theme to Hydejack:\n\n# file: `_config.yml`\ntheme: jekyll-theme-hydejack\n\n\nHydejack comes with a default configuration file that takes care most of the configuration,\nbut it pays off to check out the example config file in the Starter Kit to see what’s available.\n\nYou can now jump to running locally.\n\nTroubleshooting\nIf your existing site combines theme files with your content (as did previous verisons of Hydejack/PRO),\nmake sure to delete the following folders:\n\n\n  _layouts\n  _includes\n  _sass\n  assets\n\n\nThe assets folder most likely includes theme files as well as your personal/content files. \nMake sure to only delete files that belong to the old theme!\n\nGitHub Pages\nIf you want to build your site on GitHub Pages, check out the gh-pages branch in the Hydejack Starter Kit repo.\n\nFor existing sites, you can instead set the remote_theme key as follows:\n\n# file: `_config.yml`\nremote_theme: hydecorp/hydejack@v9.1.4\n\n\nMake sure the plugins list contains jekyll-include-cache (create if it doesn’t exist):\n\n# file: `_config.yml`\nplugins:\n  - jekyll-include-cache\n\n\nTo run this configuration locally, make sure the following is part of your Gemfile:\n\n# file: `Gemfile`\ngem \"github-pages\", group: :jekyll_plugins\ngem \"jekyll-include-cache\", group: :jekyll_plugins\n\n\nNote that Hydejack has a reduced feature set when built on GitHub Pages. \nSpecifically, using KaTeX math formulas doesn’t work when built in this way.\n\nRunning locally\nMake sure you’ve cded into the directory where _config.yml is located.\nBefore running for the first time, dependencies need to be fetched from RubyGems:\n\n$ bundle install\n\n\nIf you are missing the bundle command, you can install Bundler by running gem install bundler.\n\nNow you can run Jekyll on your local machine:\n\n$ bundle exec jekyll serve\n\n\nand point your browser to http://localhost:4000 to see Hydejack in action.\n\nContinue with Config\n\n",
      "url": "/docs/install/"
    },{
      
      
      
      "content": "\n",
      "url": "/offline.html"
    },{
      
      "title": "Posts",
      "description": "This is the list layout for showing blog posts, which shows just the title and groups them by year of publication. Check out the blog layout for comparison.\n",
      "content": "\n",
      "url": "/posts/"
    },{
      
      "title": "Projects",
      "description": "How people are using Hydejack in the real world.  This page is built using the projects layout* that you can use yourself to build a portfolio.\n",
      "content": "\n",
      "url": "/projects/"
    },{
      
      "title": "Résumé*",
      "description": "This is the description of your resume page, as it will be seen by search engines. You’ll probably want to modify it in resume.md, and maybe set hide_description to true in the front matter.\n",
      "content": "\n",
      "url": "/resume/"
    },{
      
      "title": "Upgrade",
      "description": "This chapter shows how to upgrade Hydejack to a newer version. The method depends on how you’ve installed Hydejack.\n",
      "content": "This chapter shows how to upgrade Hydejack to a newer version. The method depends on how you’ve installed Hydejack.\n\n\n  Free version\n  PRO Version\n  GitHub Pages\n\n\nBefore upgrading to v7+, make sure you’ve read the CHANGELOG,\nespecially the part about the license change!\n\nFree version\nUpgrading the free version of the theme is as easy as running\n\nbundle update jekyll-theme-hydejack\n\n\nPRO Version\n\nIn v9, the structure of Hydejack PRO sites has changed. If you’re looking to upgrade from v8 or earlier, \ncheck out Installation for existing sites instead.\n\nBuyers of the PRO version will find the files necessary for an upgrade in the #jekyll-theme-hydejack folder of the downloaded zip archive.\nTo upgrade, simply overwrite the existing theme folder in the root directory of your site with the new one, then run\n\nbundle update jekyll-theme-hydejack\n\n\nIf you’ve modified any of Hydejack’s files in #jekyll-theme-hydejack, your changes will most likely be overwritten\nand you have to apply them again. Make sure you’ve made a backup before overwriting any files.\n\nGitHub Pages\nWhen building on GitHub Pages, upgrading Hydejack is as simple as setting the remote_theme key in _config.yml to the desired version.\n\nremote_theme: hydecorp/hydejack@v9.1.4\n\n\nTo use the latest version on the v9 branch on each build, you can use  hydecorp/hydejack@v9.\n\nContinue with Config\n",
      "url": "/docs/upgrade/"
    },{
      
      "title": "Writing",
      "description": "Hydejack offers a few additional features to markup your content. Don’t worry, these are merely CSS classes added with kramdown’s {:...} syntax, so that your content remains compatible with other Jekyll themes.\n",
      "content": "Hydejack offers a few additional features to markup your content.\nDon’t worry, these are merely CSS classes added with kramdown’s {:...} syntax,\nso that your content remains compatible with other Jekyll themes.\n\n\n  A word on building speeds\n  Adding a table of contents\n  Adding notes\n  Adding large text\n  Adding large images\n  Adding image captions\n  Adding large quotes\n  Adding faded text\n  Adding tables    \n      Scroll table\n      Flip table\n      Small tables\n    \n  \n  Adding code blocks\n  Adding math    \n      Inline\n      Block\n    \n  \n\n\nFor an introduction to markdown in general, see Mastering Markdown and kramdown Syntax.\n\nA word on building speeds\nIf building speeds are a problem, try using the --incremental flag, e.g.\n\nbundle exec jekyll serve --incremental\n\n\nFrom the Jekyll docs (emphasis mine):\n\n\n  Enable the experimental incremental build feature. Incremental build only re-builds posts and pages that have changed, resulting in significant performance improvements for large sites, but may also break site generation in certain cases.\n\n\nThe breakage occurs when you create new files or change filenames.\nAlso, changing the title, category, tags, etc. of a page or post will not be reflected in pages\nother then the page or post itself.\nThis makes it ideal for writing new posts and previewing changes, but not setting up new content.\n\nAdding a table of contents\nYou can add a generated table of contents to any page by adding {:toc} below a list.\n\nMarkdown:\n* this unordered seed list will be replaced by the toc\n{:toc}\n\n\nYou can also create your table of contents as an ordered list (note the 1. instead of *):\n\n1. this ordered seed list will be replaced by the toc\n{:toc}\n\n\nThe width of the display has to be larger than 1665px for the ToC to become sticky.\nOtherwise, the ToC will appear where the seed list is placed in the document.\nTo show the table of contents only on large displays (&gt; 1665px) use the following:\n\n* this unordered seed list will be replaced by the toc \n{:toc .large-only}\n\n\nA sticky table of contents will reduce the amount of space freed up by the no_break_layout: false setting.\nThis is necessary to ensure large code blocks or tables don’t overlap with the ToC.\n\nAdding notes\nYou can add a note by adding the note class to a paragraph.\n\nExample:\n\nYou can add a note.\n\nMarkdown:\nYou can add a note.\n{:.note}\n\n\nEdit the note key in _data/strings.yml to change the wording of the default label.\nTo add a note with a specific label, add a title attribute:\n\nA custom label.\n{:.note title=\"Attention\"}\n\n\nA custom label.\n\nAdding large text\nYou can add large text by adding the lead class to the paragraph.\n\nExample:\n\nYou can add large text.\n\nMarkdown:\nYou can add large text.\n{:.lead}\n\n\nAdding large images\nYou can make an image span the full width by adding the lead class.\n\nExample:\n\n\n\nMarkdown:\n![Full-width image](https://placehold.it/800x100){:.lead width=\"800\" height=\"100\" loading=\"lazy\"}\n\n\nIt is recommended to provide the dimension of the image via the width and height attributes, \nso that browsers can calculate the layout before the images are loaded. Combining this with the loading=\"lazy\" attribute\nallows modern browsers to load the images just-in-time as the users scrolls.\n\nPrevious versions of Hydejack shipped with a custom JavaScript-based lazy loading solution,\nbut it has been removed in v9 in favor of this more standards-based approach.\n\nAdding image captions\nYou can add captions to large images by adding the figcaption class to the paragraph after the image:\n\n\n\nAn optional caption for an image.\n\nMarkdown:\n![Full-width image](https://placehold.it/800x100){:.lead width=\"800\" height=\"100\" loading=\"lazy\"}\n\nA caption for an image.\n{:.figcaption}\n\n\nAdding large quotes\nYou can make a quote “pop out” by adding the lead class.\n\nExample:\n\n\n  You can make a quote “pop out”.\n\n\nMarkdown:\n&gt; You can make a quote \"pop out\".\n{:.lead}\n\n\nAdding faded text\nYou can gray out text by adding the faded class. Use this sparingly and for information that is not essential, as it is more difficult to read.\n\nExample:\n\nI’m faded, faded, faded.\n\nMarkdown:\nI'm faded, faded, faded.\n{:.faded}\n\n\nAdding tables\nAdding tables is straightforward and works just as described in the kramdown docs, e.g.\n\n\n  \n    \n      Default aligned\n      Left aligned\n      Center aligned\n      Right aligned\n    \n  \n  \n    \n      First body part\n      Second cell\n      Third cell\n      fourth cell\n    \n  \n\n\nMarkdown:\n| Default aligned |Left aligned| Center aligned  | Right aligned  |\n|-----------------|:-----------|:---------------:|---------------:|\n| First body part |Second cell | Third cell      | fourth cell    |\n\n\nHowever, it gets tricker when adding large tables.\nIn this case, Hydejack will break the layout and grant the table the entire available screen width to the right:\n\n\n  \n    \n      Default aligned\n      Left aligned\n      Center aligned\n      Right aligned\n      Default aligned\n      Left aligned\n      Center aligned\n      Right aligned\n      Default aligned\n      Left aligned\n      Center aligned\n      Right aligned\n      Default aligned\n      Left aligned\n      Center aligned\n      Right aligned\n    \n  \n  \n    \n      First body part\n      Second cell\n      Third cell\n      fourth cell\n      First body part\n      Second cell\n      Third cell\n      fourth cell\n      First body part\n      Second cell\n      Third cell\n      fourth cell\n      First body part\n      Second cell\n      Third cell\n      fourth cell\n    \n    \n      Second line\n      foo\n      strong\n      baz\n      Second line\n      foo\n      strong\n      baz\n      Second line\n      foo\n      strong\n      baz\n      Second line\n      foo\n      strong\n      baz\n    \n    \n      Third line\n      quux\n      baz\n      bar\n      Third line\n      quux\n      baz\n      bar\n      Third line\n      quux\n      baz\n      bar\n      Third line\n      quux\n      baz\n      bar\n    \n    \n      Second body\n       \n       \n       \n      Second body\n       \n       \n       \n      Second body\n       \n       \n       \n      Second body\n       \n       \n       \n    \n    \n      2 line\n       \n       \n       \n      2 line\n       \n       \n       \n      2 line\n       \n       \n       \n      2 line\n       \n       \n       \n    \n  \n  \n    \n      Footer row\n       \n       \n       \n      Footer row\n       \n       \n       \n      Footer row\n       \n       \n       \n      Footer row\n       \n       \n       \n    \n  \n\n\nTables adopts to the font size! You can decrease the size of the table by adding the smaller CSS class. Put {:.smaller} below the Markdown table, or add class=\"smaller\" to a HTML table.\n\nScroll table\nIf the extra space still isn’t enough, the table will receive a scrollbar.\nIt is browser default behavior to break the lines inside table cells to fit the content on the screen.\nBy adding the scroll-table class on a table, the behavior is changed to never break lines inside cells, e.g:\n\n\n  \n    \n      Default aligned\n      Left aligned\n      Center aligned\n      Right aligned\n      Default aligned\n      Left aligned\n      Center aligned\n      Right aligned\n      Default aligned\n      Left aligned\n      Center aligned\n      Right aligned\n      Default aligned\n      Left aligned\n      Center aligned\n      Right aligned\n    \n  \n  \n    \n      First body part\n      Second cell\n      Third cell\n      fourth cell\n      First body part\n      Second cell\n      Third cell\n      fourth cell\n      First body part\n      Second cell\n      Third cell\n      fourth cell\n      First body part\n      Second cell\n      Third cell\n      fourth cell\n    \n    \n      Second line\n      foo\n      strong\n      baz\n      Second line\n      foo\n      strong\n      baz\n      Second line\n      foo\n      strong\n      baz\n      Second line\n      foo\n      strong\n      baz\n    \n    \n      Third line\n      quux\n      baz\n      bar\n      Third line\n      quux\n      baz\n      bar\n      Third line\n      quux\n      baz\n      bar\n      Third line\n      quux\n      baz\n      bar\n    \n    \n      Second body\n       \n       \n       \n      Second body\n       \n       \n       \n      Second body\n       \n       \n       \n      Second body\n       \n       \n       \n    \n    \n      2 line\n       \n       \n       \n      2 line\n       \n       \n       \n      2 line\n       \n       \n       \n      2 line\n       \n       \n       \n    \n  \n  \n    \n      Footer row\n       \n       \n       \n      Footer row\n       \n       \n       \n      Footer row\n       \n       \n       \n      Footer row\n       \n       \n       \n    \n  \n\n\nYou can add the scroll-table class to a markdown table by putting {:.scroll-table} in line directly below the table.\nTo add the class to a HTML table, add the it to the class attribute of the table tag, e.g. &lt;table class=\"scroll-table\"&gt;.\n\nFlip table\nAlternatively, you can “flip” (transpose) the table.\nUnlike the other approach, this will keep the table head (now the first column) fixed in place.\n\nYou can enable this behavior by adding flip-table or flip-table-small to the CSS classes of the table.\nThe -small version will only enable scrolling on “small” screens (&lt; 1080px wide).\n\nThis approach only works on simple tables that have a single tbody and an optional thead.\n\nExample:\n\n\n  \n    \n      Default aligned\n      Left aligned\n      Center aligned\n      Right aligned\n      Default aligned\n      Left aligned\n      Center aligned\n      Right aligned\n      Default aligned\n      Left aligned\n      Center aligned\n      Right aligned\n      Default aligned\n      Left aligned\n      Center aligned\n      Right aligned\n    \n  \n  \n    \n      First body part\n      Second cell\n      Third cell\n      fourth cell\n      First body part\n      Second cell\n      Third cell\n      fourth cell\n      First body part\n      Second cell\n      Third cell\n      fourth cell\n      First body part\n      Second cell\n      Third cell\n      fourth cell\n    \n    \n      Second line\n      foo\n      strong\n      baz\n      Second line\n      foo\n      strong\n      baz\n      Second line\n      foo\n      strong\n      baz\n      Second line\n      foo\n      strong\n      baz\n    \n    \n      Third line\n      quux\n      baz\n      bar\n      Third line\n      quux\n      baz\n      bar\n      Third line\n      quux\n      baz\n      bar\n      Third line\n      quux\n      baz\n      bar\n    \n    \n      4th line\n      quux\n      baz\n      bar\n      4th line\n      quux\n      baz\n      bar\n      4th line\n      quux\n      baz\n      bar\n      4th line\n      quux\n      baz\n      bar\n    \n    \n      5th line\n      quux\n      baz\n      bar\n      5th line\n      quux\n      baz\n      bar\n      5th line\n      quux\n      baz\n      bar\n      5th line\n      quux\n      baz\n      bar\n    \n    \n      6th line\n      quux\n      baz\n      bar\n      6th line\n      quux\n      baz\n      bar\n      6th line\n      quux\n      baz\n      bar\n      6th line\n      quux\n      baz\n      bar\n    \n    \n      7th line\n      quux\n      baz\n      bar\n      7th line\n      quux\n      baz\n      bar\n      7th line\n      quux\n      baz\n      bar\n      7th line\n      quux\n      baz\n      bar\n    \n    \n      8th line\n      quux\n      baz\n      bar\n      8th line\n      quux\n      baz\n      bar\n      8th line\n      quux\n      baz\n      bar\n      8th line\n      quux\n      baz\n      bar\n    \n    \n      9th line\n      quux\n      baz\n      bar\n      9th line\n      quux\n      baz\n      bar\n      9th line\n      quux\n      baz\n      bar\n      9th line\n      quux\n      baz\n      bar\n    \n    \n      10th line\n      quux\n      baz\n      bar\n      10th line\n      quux\n      baz\n      bar\n      10th line\n      quux\n      baz\n      bar\n      10th line\n      quux\n      baz\n      bar\n    \n    \n      11th line\n      quux\n      baz\n      bar\n      11th line\n      quux\n      baz\n      bar\n      11th line\n      quux\n      baz\n      bar\n      11th line\n      quux\n      baz\n      bar\n    \n    \n      12th line\n      quux\n      baz\n      bar\n      12th line\n      quux\n      baz\n      bar\n      12th line\n      quux\n      baz\n      bar\n      12th line\n      quux\n      baz\n      bar\n    \n  \n\n\nYou can add the flip-table class to a markdown table by putting {:.flip-table} in line directly below the table.\nTo add the class to a HTML table, add the it to the class attribute of the table tag, e.g. &lt;table class=\"flip-table\"&gt;.\n\nSmall tables\nIf a table is small enough to fit the screen even on small screens, you can add the stretch-table class\nto force a table to use the entire available content width. Note that stretched tables can no longer be scrolled.\n\n\n  \n    \n      Default aligned\n      Left aligned\n      Center aligned\n      Right aligned\n    \n  \n  \n    \n      First body part\n      Second cell\n      Third cell\n      fourth cell\n    \n  \n\n\nAn optional caption for a table\n\nYou can add the stretch-table class to a markdown table by putting {:.stretch-table} in line directly below the table.\nTo add the class to a HTML table, add the it to the class attribute of the table tag, e.g. &lt;table class=\"stretch-table\"&gt;.\n\nJust like images, you can add captions to tables by adding the figcaption class to the paragraph after the table.\n\nAn optional caption for a table\n{:.figcaption}\n\n\nAdding code blocks\nTo add a code block without syntax highlighting, simply indent 4 spaces (regular markdown).\nFor code blocks with code highlighting, use ~~~&lt;language&gt;. This syntax is also supported by GitHub.\nFor more information and a list of supported languages, see Rouge.\n\nYou can give each code block a filename, by making the first line in the block a comment of the form File: \"dir/filename.ext\". Use either single quotes ', double quotes \", or backticks ` to surround the filename.\n\nExample:\n\n// file: \"code-block.js\"\n// Example can be run directly in your JavaScript console\n\n// Create a function that takes two arguments and returns the sum of those\n// arguments\nvar adder = new Function(\"a\", \"b\", \"return a + b\");\n\n// Call the function\nadder(2, 6);\n// &gt; 8\n\n\nAn optional caption for a code block\n\nMarkdown:\n\n~~~js\n// file: \"code-block.js\"\n// Example can be run directly in your JavaScript console\n\n// Create a function that takes two arguments and returns the sum of those\n// arguments\nvar adder = new Function(\"a\", \"b\", \"return a + b\");\n\n// Call the function\nadder(2, 6);\n// &gt; 8\n~~~\n\nAn optional caption for a code block\n{:.figcaption}\n\n\nDO NOT use Jekyll’s { % highlight % } ... { % endhighlight % } syntax, especially together with the linenos option.\nThe generated table to render the line numbers does not have a CSS class or any other way of differentiating it from regular tables,\nso that the styles above apply, resulting in a broken page.\nWhat’s more, the output from highlight tags isn’t even valid HTML, nesting pre tags inside pre tags,\nwhich will in break the site during minification.\nYou can read more about it here and\nhere.\n\nAdding math\nBefore adding math blocks, make sure you’ve set up math support.\n\nInline\nExample:\n\nLorem ipsum f(x)=x2f(x) = x^2f(x)=x2.\n\nMarkdown:\nLorem ipsum $$ f(x) = x^2 $$.\n\n\nBlock\nExample:\n\nϕ(x,y)=ϕ(∑i=1nxiei,∑j=1nyjej)=∑i=1n∑j=1nxiyjϕ(ei,ej)=(x1,…,xn)(ϕ(e1,e1)⋯ϕ(e1,en)⋮⋱⋮ϕ(en,e1)⋯ϕ(en,en))(y1⋮yn)\\begin{aligned}\n  \\phi(x,y) &amp;= \\phi \\left(\\sum_{i=1}^n x_ie_i, \\sum_{j=1}^n y_je_j \\right) \\\\[2em]\n            &amp;= \\sum_{i=1}^n \\sum_{j=1}^n x_i y_j \\phi(e_i, e_j)            \\\\[2em]\n            &amp;= (x_1, \\ldots, x_n)\n               \\left(\\begin{array}{ccc}\n                 \\phi(e_1, e_1)  &amp; \\cdots &amp; \\phi(e_1, e_n) \\\\\n                 \\vdots          &amp; \\ddots &amp; \\vdots         \\\\\n                 \\phi(e_n, e_1)  &amp; \\cdots &amp; \\phi(e_n, e_n)\n               \\end{array}\\right)\n               \\left(\\begin{array}{c}\n                 y_1    \\\\\n                 \\vdots \\\\\n                 y_n\n               \\end{array}\\right)\n\\end{aligned}ϕ(x,y)​=ϕ(i=1∑n​xi​ei​,j=1∑n​yj​ej​)=i=1∑n​j=1∑n​xi​yj​ϕ(ei​,ej​)=(x1​,…,xn​)⎝⎛​ϕ(e1​,e1​)⋮ϕ(en​,e1​)​⋯⋱⋯​ϕ(e1​,en​)⋮ϕ(en​,en​)​⎠⎞​⎝⎛​y1​⋮yn​​⎠⎞​​\n\nAn optional caption for a math block\n\nMarkdown:\n\n$$\n\\begin{aligned} %!!15\n  \\phi(x,y) &amp;= \\phi \\left(\\sum_{i=1}^n x_ie_i, \\sum_{j=1}^n y_je_j \\right) \\\\[2em]\n            &amp;= \\sum_{i=1}^n \\sum_{j=1}^n x_i y_j \\phi(e_i, e_j)            \\\\[2em]\n            &amp;= (x_1, \\ldots, x_n)\n               \\left(\\begin{array}{ccc}\n                 \\phi(e_1, e_1)  &amp; \\cdots &amp; \\phi(e_1, e_n) \\\\\n                 \\vdots          &amp; \\ddots &amp; \\vdots         \\\\\n                 \\phi(e_n, e_1)  &amp; \\cdots &amp; \\phi(e_n, e_n)\n               \\end{array}\\right)\n               \\left(\\begin{array}{c}\n                 y_1    \\\\\n                 \\vdots \\\\\n                 y_n\n               \\end{array}\\right)\n\\end{aligned}\n$$\n\nAn optional caption for a math block\n{:.figcaption}\n\n\nKaTeX does not support the align and align* environments.\nInstead, aligned should be used, e.g. \\begin{aligned} ... \\end{aligned}.\n\nContinue with Scripts\n\n",
      "url": "/docs/writing/"
    }
  ], 
  "documents": [
    {
      
      "title": "Parsing typed eDSL",
      "date": "2019-06-14 00:00:00 +0300",
      
      "content": "In a post at Serokell’s blog I cover my journey in\nturning a typed stack-based programming language Michelson to embedded DSL in Haskell. Tricky part is\nparsing language from text and returning a well-typed representation of a program.\n\nBeyond blog post\n\nYou can check my lectures on advanced typing in Haskell:\n\n\n  Brand new DSL world\n  Some fun with kinds\n\n\nIdeas I described in this blog post were taken further to develop Indigo, a more-or-less conventionally looking embedded programming language that is compiled to stack language as in blog post by further exploiting possibilities of Haskell’s rich type system.\n",
      "categories": ["work"],
      "tags": [],
      
      "collection": "posts",
      "url": "/blog/work/2019-06-14-parsing-typed-edsl/"
    },{
      
      "title": "Work",
      "date": "2021-11-27 16:22:34 +0300",
      "description": "Guest posts I wrote while working on different projects.\n",
      "content": "\n",
      "categories": [],
      "tags": [],
      
      "collection": "featured_categories",
      "url": "/blog/work/"
    }
  ]
}

